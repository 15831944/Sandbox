<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Move Line</title>
<meta charset = "UTF-8"/>

<!-- Update the path to paper js -->
<script type="text/javascript" src="raphael.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js"></script>
<script type="text/javascript" src="Test.js"></script>

<style type="text/css">
svg {
    border: solid 1px #000;
}
</style>

</head>
<body>
<div id="canvas"></div>
<button type="button" id="beginBtn">Begin</button>
<button type="button" id="finishBtn">Finish</button>
<button type="button" id="clearBtn">Clear</button>
<button type="button" id="testBtn">Test</button>
</body>
</html>

<script type="text/javascript"> 
    //<![CDATA[
    var CANVAS_WIDTH = 500;
    var CANVAS_HEIGHT = 500;
    var LINE_WIDTH = 5;
    var CONTROL_POINT_RADIOUS = 10;

    function Vertex(x, y) {
        this.x = x;
        this.y = y;
    };

    function Line(startX, startY, endX, endY, paper) {
        this.start = new Vertex(startX, startY);
        this.end = new Vertex(endX, endY)
        this.paper = paper;
        this.gizmo = paper.path("M" + this.start.x + " " + this.start.y + " L" + this.end.x + " " + this.end.y);
        this.gizmo.attr("stroke", "red");
        this.gizmo.attr("stroke-width", LINE_WIDTH);

        this.endGizmo;
        this.startGizmo;
        this.moveGizmo;
        this.bEditable = false;
    };

    Line.prototype.updateStart = function (x, y) {
        this.start.x = x;
        this.start.y = y;
        this.redraw();
        return this;
    };

    Line.prototype.updateEnd = function (x, y) {
        this.end.x = x;
        this.end.y = y;
        this.redraw();
        return this;
    };

    Line.prototype.print = function () {
        console.log(this.start.x + ";" + this.start.y + ";" + this.end.x + ";" + this.end.y);
    };

    Line.prototype.startEdit = function () {
        var me = this;

        // Avoid triggering multi-times
        if (me.bEditable)
            return;
        me.bEditable = true;

        // Change the line attributes
        me.gizmo.attr("stroke", "blue");
        me.gizmo.attr("stroke-dasharray", ".");
        // Show the end control point
        me.endGizmo = this.paper.circle(this.end.x, this.end.y, CONTROL_POINT_RADIOUS);
        me.endGizmo.attr("fill", "yellow");

        me.endGizmo.drag(function (dx, dy) {
            // move
            me.end.x += dx;
            me.end.y += dy;
            me.redraw();
            me.endGizmo.attr({ cx: me.end.x, cy: me.end.y });
            me.moveGizmo.attr({ cx: (me.start.x + me.end.x) / 2, cy: (me.start.y + me.end.y) / 2 });
            me.end.x -= dx;
            me.end.y -= dy;
        },
        function () {
            // drag start 
        },
        function () {
            // drag end
            me.end.x = me.endGizmo.attr("cx");
            me.end.y = me.endGizmo.attr("cy");
        });

        // Show the start control point
        me.startGizmo = this.paper.circle(this.start.x, this.start.y, CONTROL_POINT_RADIOUS);
        me.startGizmo.attr("fill", "yellow");

        me.startGizmo.drag(function (dx, dy) {
            // move
            me.start.x += dx;
            me.start.y += dy;
            me.redraw();
            me.startGizmo.attr({ cx: me.start.x, cy: me.start.y });
            me.moveGizmo.attr({ cx: (me.start.x + me.end.x) / 2, cy: (me.start.y + me.end.y) / 2 });
            me.start.x -= dx;
            me.start.y -= dy;
        },
        function () {
            // drag start 
        },
        function () {
            // drag end
            me.start.x = me.startGizmo.attr("cx");
            me.start.y = me.startGizmo.attr("cy");
        });

        // Show the move control point
        me.moveGizmo = me.paper.circle((me.start.x + me.end.x) / 2, (me.start.y + me.end.y) / 2, CONTROL_POINT_RADIOUS);
        me.moveGizmo.attr("fill", "yellow");
        me.moveGizmo.drag(function (dx, dy) {
            // move
            me.start.x += dx;
            me.start.y += dy;
            me.end.x += dx;
            me.end.y += dy;
            me.redraw();
            me.startGizmo.attr({ cx: me.start.x, cy: me.start.y });
            me.endGizmo.attr({ cx: me.end.x, cy: me.end.y });
            me.moveGizmo.attr({ cx: (me.start.x + me.end.x) / 2, cy: (me.start.y + me.end.y) / 2 });
            me.start.x -= dx;
            me.start.y -= dy;
            me.end.x -= dx;
            me.end.y -= dy;
        },
        function () {
            // drag start 
        },
        function () {
            // drag end
            me.start.x = me.startGizmo.attr("cx");
            me.start.y = me.startGizmo.attr("cy");
            me.end.x = me.endGizmo.attr("cx");
            me.end.y = me.endGizmo.attr("cy");
        });
    };

    Line.prototype.endEdit = function () {
        // Recover the line
        this.gizmo.attr("stroke", "red");
        this.gizmo.attr("stroke-dasharray", "");

        // Clear the control points
        this.startGizmo.remove();
        this.endGizmo.remove();
        this.moveGizmo.remove();
        this.bEditable = false;
    };

    Line.prototype.getPath = function () {
        return "M" + this.start.x + " " + this.start.y + " L" + this.end.x + " " + this.end.y;
    };

    Line.prototype.redraw = function () {
        this.gizmo.attr("path", this.getPath());
    };

    $(document).ready(function () {
        var paper = Raphael("canvas", CANVAS_WIDTH, CANVAS_HEIGHT);
        var line;
        var lines = [];
        var bEditable = false;
        $("#canvas").dblclick(function (e) {
            if (!bEditable) {
                bEditable = true;

                x = e.offsetX;
                y = e.offsetY;
                line = new Line(x, y, x, y, paper);
                $("#canvas").bind("mousemove", function (e) {
                    x = e.offsetX;
                    y = e.offsetY;
                    line = line.updateEnd(x, y);
                });
            } else {
                $("#canvas").unbind("mousemove");
                if (line != undefined) {
                    lines.push(line);
                }
                bEditable = false;
            }

        });

        $("#clearBtn").click(function () {
            paper.clear();
            lines = [];
        });

        $("#beginBtn").click(function () {
            for (var i = 0, len = lines.length; i < len; ++i) {
                var line = lines[i];
                line.startEdit();
            }
        });

        $("#finishBtn").click(function () {
            for (var i = 0, len = lines.length; i < len; ++i) {
                var line = lines[i];
                line.endEdit();
            }
        });

        $("#testBtn").click(function () {
            var list = [];
            var t = new Test();
            t.change();
            console.log(t.get()); // output true;
            list.push(t);
            t = new Test();
            console.log(t.get()); // output false
            list.push(t);

            for (var i = 0, len = list.length; i < len; ++i) {
                var t = list[i];
                console.log(t.get()); // !!! output true twice 
            }
        });
    });
    //]]> 
</script>