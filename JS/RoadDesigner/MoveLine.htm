<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Move Line</title>
<meta charset = "UTF-8"/>

<!-- Update the path to paper js -->
<script type="text/javascript" src="raphael.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js"></script>

<style type="text/css">
svg {
    border: solid 1px #000;
}
</style>

</head>
<body>
<div id="canvas"></div>
<button type="button" id="beginBtn">Begin</button>
<button type="button" id="finishBtn">Finish</button>
<button type="button" id="clearBtn">Clear</button>
</body>
</html>

<script type="text/javascript"> 
    //<![CDATA[
    var CANVAS_WIDTH = 500;
    var CANVAS_HEIGHT = 500;
    var LINE_WIDTH = 5;
    var CONTROL_POINT_RADIOUS = 10;

    function Line(startX, startY, endX, endY, paper) {
        var start = {
            x: startX,
            y: startY
        };
        var end = {
            x: endX,
            y: endY
        };

        Line.prototype.updateStart = function (x, y) {
            start.x = x;
            start.y = y;
            redraw();
            return this;
        }

        Line.prototype.updateEnd = function (x, y) {
            end.x = x;
            end.y = y;
            redraw();
            return this;
        }

        var endGizmo;
        var bEditable = false;

        Line.prototype.startEdit = function () {
            // Avoid triggering multi-times
            if (bEditable)
                return;
            bEditable = true;

            // Change the line attributes
            gizmo.attr("stroke", "blue");
            // Show the control points
            endGizmo = paper.circle(end.x, end.y, CONTROL_POINT_RADIOUS);
            endGizmo.attr("fill", "yellow");

            var dragstart = function () {
            }

            var dragend = function () {
                end.x = endGizmo.attr("cx");
                end.y = endGizmo.attr("cy");
            }

            var endmove = function (dx, dy) {
                end.x += dx;
                end.y += dy;
                redraw();
                endGizmo.attr({ cx: end.x, cy: end.y });
                end.x -= dx;
                end.y -= dy;
            }

            endGizmo.drag(endmove, dragstart, dragend);
        }

        Line.prototype.endEdit = function () {
            // Recover the line
            gizmo.attr("stroke", "red");

            // Clear the control points
            endGizmo.remove();
            bEditable = false;
        }

        var getPath = function () {
            return "M" + start.x + " " + start.y + " L" + end.x + " " + end.y;
        };

        var gizmo = paper.path(getPath());
        gizmo.attr("stroke", "red");
        gizmo.attr("stroke-width", LINE_WIDTH);

        var redraw = function () {
            gizmo.attr("path", getPath());
        }
    };

    $(document).ready(function () {
        var paper = Raphael("canvas", CANVAS_WIDTH, CANVAS_HEIGHT);
        var line;
        var lines = [];
        $("#canvas").dblclick(function (e) {
            x = e.offsetX;
            y = e.offsetY;
            line = new Line(x, y, x, y, paper);
            $("#canvas").bind("mousemove", function (e) {
                x = e.offsetX;
                y = e.offsetY;
                line = line.updateEnd(x, y);
            });
        });

        $("#canvas").mouseup(function (e) {
            $("#canvas").unbind("mousemove");
            if (line != undefined) {
                lines.push(line);
            }
        });

        $("#clearBtn").click(function () {
            paper.clear();
            lines = [];
        })

        $("#beginBtn").click(function () {
            for (var i = 0, len = lines.length; i < len; i++) {
                var line = lines[i];
                line.startEdit();
            }
        })

        $("#finishBtn").click(function () {
            // paper.clear();
            for (var i = 0, len = lines.length; i < len; i++) {
                var line = lines[i];
                line.endEdit();
            }
        })
    });
    //]]> 
</script>